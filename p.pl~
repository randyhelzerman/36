/*

a :-b.
a :-c.

a :-d.
a :-e.

(b ; c).


[g]-[]

[e,f]-[]

[a,b]-[],  [b,c]-[],  [c,a]-[]


a-(a1 ; a2).
b-(b1 ; b2).
c-(c2 ; c2).




*/


axiom(a).
axiom(b).

dial(a11,a,1).
dial(a12,a,1).
dial(a1,a,1).
dial(a2,a,2).

dial(b1,b,1).
dial(b2,b,2).

dial(c1,c,1).
dial(c2,c,2).


clause((g:- a1,b1)).
clause((g:- a1,b2)).
clause((g:- a2,b2)).

clause((g:- b1,c1)).
clause((g:- b1,c2)).

clause((g:- a2,c1)).
clause((g:- a2,c2)).


prove((A ; B), R1,R2) :-
    (
        prove(A, R1,R2)
    ;
        prove(B, R1,R2)
    ).
    
prove((A,B), R1,R3) :-
    prove(A, R1,R2),
    prove(B, R2,R3).

prove(A, R,R) :- axiom(A).

prove(A, R1,R2) :- 
	clause((A:-B)),
	prove(B,R1,R2).


prove(A, R,R) :- 
      dial(A,N,V),
      member(N=V,R),!.

prove(A, R,[N=V|R]) :-
    dial(A,N,V),
    \+ member(N=_,R).


get_all_other_scenarios(Rs,Rss) :-
	sort(Rs,Rs1),
	get_dials(Rs1,Ds),
	possible_scenarios_for_dials(Ds,Rss1),
	select(Rs1,Rss1,Rss).

get_dials(Rs,Ds) :-
	get_dials_from_scenarios(Rs,Ds1),
	sort(Ds1,Ds).


get_dials_from_scenarios([],[]).
get_dials_from_scenarios([D=_|Rs],[D|Ds]) :-
	get_dials_from_scenarios(Rs,Ds).


possible_scenarios_for_dials(Ds,Rss) :-
	possible_assignments_for_dials(Ds,As),
	findall(Rs,possible_scenario_for_dials(As,Rs), Rss).

possible_scenario_for_dials([],[]).
possible_scenario_for_dials([D|Ds],[A|As]) :-
	select(A,D,_),
	possible_scenario_for_dials(Ds,As).


possible_assignments_for_dials([],[]).
possible_assignments_for_dials([D|Ds],[Rs|Rss]) :-
	possible_assignments_for_dial(D,Rs),
	possible_assignments_for_dials(Ds,Rss).

possible_assignments_for_dial(D,Rs) :- setof(D=V,X^dial(X,D,V),Rs).


prove1(A,Rs3) :-
    findall(R,
	    prove(A,[],R),
	    Rs1),
    sort(Rs1,Rs2),
    map_switch_to_property_list(Rs2,Rs3).

% changes a list of the form [n1=v1, n2=v2, ...] 
% to a list of the form [n1-[v1], n2-[v2], ...]
switch_to_property_list([],[]).
switch_to_property_list([N=V|Ss], [N-[V]|Ps]) :-
        switch_to_property_list(Ss, Ps).

map_switch_to_property_list([],[]).
map_switch_to_property_list([H1|T1],[H2|T2]) :-
	switch_to_property_list(H1,H2),
	map_switch_to_property_list(T1,T2).



/*

filter_exhaustive_switches([],[]).
filter_exhaustive_switches([Rs|Rs1],Rs2) :-
     % use first element as loop control.
     switch_to_property_list(Rs,Ps1),
     gather_switches_which_appear_in_all_residues(Rs1, Ps1,Ps2),
     sort_property_list_values(Ps2,Ps3),
     find_switches_which_every_value_appears(Ps3,Ss).


find_switches_which_every_value_appears([],[]).
find_switches_which_every_value_appears([N-Vs|Ps],Ss) :-
     all_switch_values(N,Ves),
     (Vs=Ves ->
         Ss = [N|Ss1]
     ;
         Ss = Ss1
     ),
     find_switches_which_every_value_appears(Ps,Ss1).


% if a switch isn't a member of _all_ of the  residues, it is eliminated 
% from the list. if it _is_ a member of all of the residues, this predicate 
% groups all of the switch values found in the list for the switch.
sort_property_list_values([],[]).
sort_property_list_values([N-Vs1|Ps1],[N-Vs2|Ps2]) :-
    sort(Vs1,Vs2),
    sort_property_list_values(Ps1,Ps2).

gather_switches_which_appear_in_all_residues([], Ps,Ps).
gather_switches_which_appear_in_all_residues([R|Rs], Ps1,Ps3) :-
        determine_whether_switch_appears_in_residue(Ps1, R, Ps2),
        gather_switches_which_appear_in_all_residues(Rs, Ps2,Ps3).
        
determine_whether_switch_appears_in_residue([],_R, []).
determine_whether_switch_appears_in_residue([N-Vs|Ps1],R1,Ps3) :-
        ( select(N=V, R1,R2) ->
            Ps3 = [N-[V|Vs] | Ps2]
        ;
            Ps3 = Ps1
        ),
        determine_whether_switch_appears_in_residue(Ps1, R2, Ps2).


prove((A,B), R1,R3) :-
    prove(A, R1,R2),
    prove(B, R2,R3).

prove(A, R,R) :- axiom(A).

prove(A, R,R) :- 
      dial(A,N,V),
      member(N=V,R),!.

prove(A, R,[N=V|R]) :-
    dial(A,N,V),
    not member(N=_,R).

dial(_,_,_) :- fail.
*/
